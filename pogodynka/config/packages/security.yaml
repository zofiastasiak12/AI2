security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: auto
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        #app_user_provider:
        #    entity:
        #        class: App\Entity\User
        #        property: email
        app_user_provider:
            memory:
                users:
                    User: {password: '$2y$13$ov89d4mK24lPG7ZL4lMNheHrZVF/tNe4tOm1l8nFBhKIdwWEO9DDq', roles: ['ROLE_ADMIN']}
                    User_2: {password: '$2y$13$ov89d4mK24lPG7ZL4lMNheHrZVF/tNe4tOm1l8nFBhKIdwWEO9DDq', roles: ['ROLE_LOCATION_ADMIN']}
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            #http_basic:
                
                #realm: My Secured Area
            form_login:
                login_path: login
                check_path: login
            logout:
                path: app_logout

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

    role_hierarchy:
        ROLE_ADMIN: 
            - ROLE_MEASUREMENT_EDIT
            - ROLE_LOCATION_INDEX
            - ROLE_LOCATION_SHOW
            - ROLE_MEASUREMENT_SHOW
            - ROLE_MEASUREMENT_DELETE
            - ROLE_LOCATION_DELETE
            - ROLE_MEASUREMENT_ADD
            - ROLE_LOCATION_ADD
        ROLE_MEASUREMENT_ADMIN:
            - ROLE_MEASUREMENT_DELETE
            - ROLE_MEASUREMENT_EDIT
            - ROLE_MEASUREMENT_ADD
            - ROLE_MEASUREMENT_SHOW
        ROLE_LOCATION_ADMIN:
            - ROLE_LOCATION_DELETE
            - ROLE_LOCATION_ADD
            - ROLE_LOCATION_EDIT
            - ROLE_LOCATION_INDEX
            - ROLE_LOCATION_SHOW
      

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
